
services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: ticketing-sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrong!Passw0rd"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./infrastructure/sql/init:/docker-entrypoint-initdb.d
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q 'SELECT 1' -C || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Elasticsearch for EventSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: ticketing-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Redis for EventSearch caching
  redis:
    image: redis:7.2-alpine
    container_name: ticketing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ticketing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # EventManagement Service
  eventmanagement-api:
    build:
      context: ./src/backend/EventManagement
      dockerfile: Dockerfile
    container_name: eventmanagement-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=EventManagementDB;User Id=sa;Password=YourStrong!Passw0rd;TrustServerCertificate=true;Encrypt=false;
      - EventSearch__BaseUrl=http://eventsearch-api:8080
      - ASPNETCORE_LOGGING__LOGLEVEL__DEFAULT=Information
      - ASPNETCORE_LOGGING__LOGLEVEL__MICROSOFT=Warning
    ports:
      - "8080:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ticketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # EventSearch Service
  eventsearch-api:
    build:
      context: ./src/backend/EventSearch
      dockerfile: Dockerfile
    container_name: eventsearch-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Elasticsearch=http://elasticsearch:9200
      - ConnectionStrings__Redis=redis:6379
      - ASPNETCORE_LOGGING__LOGLEVEL__DEFAULT=Information
      - ASPNETCORE_LOGGING__LOGLEVEL__MICROSOFT=Warning
      - ASPNETCORE_LOGGING__LOGLEVEL__EVENTSEARCH=Debug
    ports:
      - "8081:8080"
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ticketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend
  frontend:
    build:
      context: ./src/frontend/ticket-booking-system
      dockerfile: Dockerfile
    container_name: ticket-booking-frontend
    ports:
      - "4200:80"
    depends_on:
      eventmanagement-api:
        condition: service_healthy
      eventsearch-api:
        condition: service_healthy
    networks:
      - ticketing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Future: TicketInventory Service (ready for when we build it)
  # ticketinventory-api:
  #   build:
  #     context: ./src/backend/TicketInventory
  #     dockerfile: Dockerfile
  #   container_name: ticketinventory-api
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:8080
  #     - CosmosDB__ConnectionString=${COSMOS_CONNECTION_STRING}
  #   ports:
  #     - "5002:8080"
  #   networks:
  #     - ticketing-network

  # Future: PaymentProcessing Service
  # paymentprocessing-api:
  #   build:
  #     context: ./src/backend/PaymentProcessing
  #     dockerfile: Dockerfile
  #   container_name: paymentprocessing-api
  #   ports:
  #     - "5003:8080"
  #   networks:
  #     - ticketing-network

  # Future: NotificationService
  # notificationservice-api:
  #   build:
  #     context: ./src/backend/NotificationService
  #     dockerfile: Dockerfile
  #   container_name: notificationservice-api
  #   ports:
  #     - "5004:8080"
  #   networks:
  #     - ticketing-network

  # Future: API Gateway
  # api-gateway:
  #   build:
  #     context: ./src/backend/APIGateway
  #     dockerfile: Dockerfile
  #   container_name: api-gateway
  #   ports:
  #     - "5000:8080"
  #   networks:
  #     - ticketing-network

networks:
  ticketing-network:
    driver: bridge
    name: ticketing-network

volumes:
  sqlserver_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
